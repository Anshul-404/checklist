 #!/bin/bash

RED="31"
BOLDRED="\e[1;${RED}m"
GREEN="32"
BOLDGREEN="\e[1;${GREEN}m"
CYAN="\e[36m"
CYAN="\e[1m${CYAN}"
WHITE="\e[97m"
ORANGE="\e[33m"
ORANGE="\e[0m${ORANGE}"
ENDCOLOR="\e[0m"


echo  "${BOLDRED}"
figlet CHECKLIST
echo "	${BOLDGREEN}DON'T TRY HARDER, TRY AGAIN !!"
echo "  	            -JOHN HAMMOND"
echo "${ENDCOLOR}"

echo """${CYAN}
CTF / Bug Bounty Challenge Checklist
-------------------------------------

Reconnaissance
--------------${ORANGE}
1. Full Enumeration: Leave no stone unturned during enumeration. Use tools like Nmap with specific scripts (e.g., vuln, smb) to thoroughly scan the target.
2. Vhost Enumeration: Particularly important when you need to modify the hosts file. Use tools like Gobuster or Nmap for virtual host discovery.
3. Scan All Ports: Conduct a comprehensive port scan in the background to identify all open ports and services.
4. Website-Specific Reconnaissance:
   - Look for SUBDOMAINS in EMAILS
   - Read JavaScript and CSS files if feasible.
   - Look for configuration files in server directories like /etc/apache2/apache2.conf or httpd.conf.
   - Use tools like Nikto for website vulnerability scanning.

${CYAN}Initial Foothold${ORANGE}
${CYAN}----------------${ORANGE}
1. Directory and File Scanning: Utilize tools like Gobuster to discover new directories and files. Pay special attention to file types like .txt, .py, .sh, .rb, .conf.
2. Credential Exploration:
   - If an admin password is found for a web application, check for vulnerabilities like LFI, RFI, RCE, and hunt for other user credentials.
   - Experiment with PHP reverse shells in templates, themes, or other PHP files within the website.
   - For LFI, try bypass methods a few times, including magic bytes and URL encoding.
3. Input Fields: For fields that process input, attempt command injection, possibly using tools like Burp Suite.
4. Special File Formats: Copy magic bytes and search online to identify file types.
5. CMS Vulnerability Research: Google CMS versions, potential exploits, and how to leverage them for a reverse shell.

${CYAN}Post Exploitation
------------------${ORANGE}
1. Detailed System Examination: After gaining initial access, check all possible directories (/var/www/, /tmp/, /etc/, /home/, /opt/, /home/.ssh/) for valuable information.
2. Log and Process Analysis: Review crontabs, run sudo -l, ls -la, id, ps, ps aux, and history commands to understand the system's state and activities.
3. Special Permissions: Look for files with special permissions (SUID, SGID).
4. Library Manipulation: If a library import lacks a full path, create a file with malicious code and alter the PATH variable to include directories like /tmp/.
5. Gobuster Re-Run: If nothing interesting is found initially, use Gobuster again with different extensions.
6. Metasploit: If an exploit is possible and is not working for some reason, try migrating to a different process that has a shell.

${CYAN}Privilege Escalation
--------------------${ORANGE}
1. Sudo Tricks: Use sudo -h to specify a host or explore other less-known sudo functionalities.
2. Exploiting Service Misconfigurations: Look for services or cron jobs that are misconfigured and can be exploited.
3. GTFOBins: Utilize GTFOBins to find binaries that can be used to bypass restrictions, escalate privileges, or get out of restricted shells.

${CYAN}Website-Specific
-----------------${ORANGE}
1. Search for Reflections: If input is reflected on the page (e.g., search results, usernames), try Server-Side Template Injection (SSTI) techniques, encoding payloads if necessary.
2. URL Manipulation: If the $[GET] method in PHP is observed, consider uploading your shell via URL, remembering to prefix with http://.
3. SQL Injection: Use SQLMap with various options (e.g., sqlmap -r request --risk=3 --level=5 --dump-all --threads 5) to explore SQL injection vulnerabilities.
4. Check .htaccess, log files, .conf files

${CYAN}File Format Analysis and Manipulation
---------------------------------------${ORANGE}
TOOLS:- Binwalk, zsteg, pngcheck, strings, exiftool, file, pdftohtml, aperisolve

1. Understand File Specifications: Research and understand the structure and specifications of common file formats (e.g., PNG, JPEG, ELF, PDF). 
2. Hexadecimal Analysis: Use tools like hexdump, hexeditor or xxd to analyze the file's hexadecimal representation. Look for anomalies, missing bytes, or corrupted sections.
3. Data Extraction and Modification: When necessary, extract data to a separate file for analysis or modification. Be prepared to insert or modify bytes to repair or alter the file's structure.
4. Binary File Tools: Familiarize yourself with binary file manipulation tools such as binwalk, dd, and foremost for extracting embedded files or data.
5. File Carving: Practice file carving techniques to recover deleted or hidden data within files. Tools like scalpel can be useful in these scenarios.
6. Documentation and Write-ups: Review write-ups from similar challenges to learn new techniques and approaches. Document your own process for future reference.
7. Comparation: Compare corrupted file with a normal file of same format.

${CYAN}Additional Points
------------------${ORANGE}
1. Bruteforce Tactics: If the CTF is themed around a character/movie/game, create dictionaries and bruteforce using related information.
2. Samba Share Enumeration: Thoroughly enumerate Samba shares as they can reveal critical information.
3. Cipher Decryption: Use different websites and tools to brute force Vigen√®re or other ciphers.
4. Read and Analyze: Carefully read and analyze all available information, instructions, and hints.
5. Do not overlook any Single Endpoint / URL / Input field / Directory / etc (CANNOT STRESS THIS ENOUGH)
"""
